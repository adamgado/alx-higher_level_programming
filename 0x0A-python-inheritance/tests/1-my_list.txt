Import function from module:
    >>> MyList = __import__('1-my_list').MyList

test empty list:
    >>> empty_list = MyList()
    >>> empty_list.print_sorted()
    []

test normal:
    >>> new_list = MyList([3, 1, 2])
    >>> new_list.print_sorted()
    [1, 2, 3]

test list with negative numbers:
    >>> new_list = MyList([-1000, -90, -1234567, 0, -2323323, -100])
    >>> new_list.print_sorted()
    [-23232323, -1234567, -1000, -100, -90, 0]

test that the original list stays the same:
    >>> original_list = MyList([1, 5, 10, -10, 20, 50, 0])
    >>> original_list.print_sorted()
    [-10, 0, 1, 5, 10, 20, 50]
    >>> original_list
    [1, 5, 10, -10, 20, 50, 0]

test list ordered already:
    >>> ordered_list = MyList([-5, 0, 5, 10, 15, 20, 25])
    >>> ordered_list.print_sorted()
    [-5, 0, 5, 10, 15, 20, 25]

test class type:
    >>> new_list = MyList()
    >>> type(new_list) == MyList
    True

test inheritance parent:
    >>> new_list = MyList()
    >>> isinstance(new_list, list)
    True

test calling class with no arguments:
    >>> new_list.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

test calling with 1 arguments:
    >>> new_list.print_sorted([7, 1, 3, 123])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given
